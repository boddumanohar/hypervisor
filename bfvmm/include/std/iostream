//
// Bareflank Hypervisor
//
// Copyright (C) 2015 Assured Information Security, Inc.
// Author: Rian Quinn        <quinnr@ainfosec.com>
// Author: Brendan Kerrigan  <kerriganb@ainfosec.com>
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

#ifndef IOSTREAM_H
#define IOSTREAM_H

#include <stddef.h>

namespace std
{

enum ostream_modifier
{
    undefined_modifier = 0,
    endl = 1,
    dec = 10,
    hex = 16,
    left = 101,
    right = 102
};

class ostream_width
{
public:
    ostream_width(int width) { m_val = width; }
    ~ostream_width() {}

    int val() { return m_val; }

private:
    int m_val;
};

class ostream
{
public:

    ostream() {}
    virtual ~ostream() {}

    bool init();

    ostream& operator<<(const char *str);
    ostream& operator<<(bool val);
    ostream& operator<<(char val);
    ostream& operator<<(unsigned char val);
    ostream& operator<<(short val);
    ostream& operator<<(unsigned short val);
    ostream& operator<<(int val);
    ostream& operator<<(unsigned int val);
    ostream& operator<<(long long int val);
    ostream& operator<<(unsigned long long int val);
    ostream& operator<<(void *val);
    ostream& operator<<(size_t val);
    ostream& operator<<(ostream_modifier modifier);
    ostream& operator<<(ostream_width width);

private:

    int m_base;
    int m_width;
    ostream_modifier m_justify;
};

ostream_width setw(int width);

extern ostream cout;

};

#endif
